{
    "workbench.startupEditor": "newUntitledFile",
    "editor.fontWeight": "bold",
    "editor.fontFamily": "'Hack Nerd Font'",
    "workbench.colorCustomizations": {
        "[Ayu Mirage Bordered]": {
            "editorGroup.border": "#ff7b00",
            "editor.background": "#020227",
            "editor.foreground": "#6495ed",
            "editorLineNumber.foreground": "#ee0a5d",
            "editor.selectionBackground": "#5a53537c",
            "editor.selectionHighlightBackground": "#00ced162",
            "editor.lineHighlightBackground": "#ffffff27",
            "scrollbarSlider.background": "#3b5558",
            "scrollbarSlider.hoverBackground": "#37b4a6",
            "statusBar.background": "#2e2b2b36",
            "statusBar.noFolderBackground": "#200c2cbb",
            "statusBar.debuggingBackground": "#ff7f50",
            "statusBar.border": "#ff4500",
            "statusBarItem.prominentBackground": "#ff7f50",
            "activityBar.border": "#ff7f50",
            "activityBar.background": "#2e2b2b36",
            "activityBar.foreground": "#ff4500",
            "button.background": "#778899",
            "sideBar.background": "#020227",
            "sideBar.border": "#ffff00",
            "sideBar.foreground": "#5f9ea0",
            "sideBarTitle.foreground": "#dfdbdb",
            "tab.border": "#ffa500",
            "tab.activeBackground": "#8f212169",
            "tab.activeForeground": "#04ffff",
            "tab.activeBorder": "#ffe602",
            "badge.background": "#ff713e",
        },
        "[Ayu Light Bordered]": {
            "editorLineNumber.foreground": "#ee0a5d",
            "activityBar.foreground": "#ff4500",
            "activityBar.border": "#919191"
        },
        "[Ayu Light]": {
            "editorLineNumber.foreground": "#ee0a5d",
            "activityBar.foreground": "#ff4500",
            "activityBar.border": "#919191"
        },
        "[Horizon Bold]": {
            "editorLineNumber.foreground": "#ee0a5d",
            "editorGroup.border": "#fc025e",
            "activityBar.border": "#fc025e85",
            "activityBar.foreground": "#fc025e",
            "statusBar.border": "#fc025e8a",
            "sideBar.border": "#fc025e",
            "editor.selectionBackground": "#474747"
        },
        "[Material Theme Darker]": {
            "editorLineNumber.foreground": "#ee0a5d"
        }
    },
    "diffEditor.renderSideBySide": true,
    "editor.renderWhitespace": "boundary",
    "editor.suggestSelection": "first",
    "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
    "java.configuration.checkProjectSettingsExclusions": false,
    "debug.allowBreakpointsEverywhere": true,
    "rust.rustup": {
        "toolchain": "nightly-x86_64-apple-darwin",
        "nightlyToolchain": "nightly-x86_64-apple-darwin"
    },
    "rust.mode": "rls",
    "rust.rls": {
        "useRustfmt": true
    },
    "rust-client.updateOnStartup": true,
    "files.trimTrailingWhitespace": true,
    "git.enableSmartCommit": true,
    "python.jediEnabled": false,
    "python.pythonPath": "python3",
    "java.errors.incompleteClasspath.severity": "ignore",
    "java.home": "/Library/Java/JavaVirtualMachines/liberica-jdk-14-full.jdk/Contents/Home",
    "terminal.integrated.inheritEnv": false,
    "C_Cpp.updateChannel": "Insiders",
    "workbench.iconTheme": "material-icon-theme",
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "terminal.integrated.shell.osx": "/bin/zsh",
    "workbench.colorTheme": "Panda Syntax",
    "java.semanticHighlighting.enabled": true,
    "[html]": {
        "editor.defaultFormatter": "lonefy.vscode-JS-CSS-HTML-formatter"
    },
    "java.import.gradle.home": "string",
    "java.import.gradle.user.home": "string",
    "scm.inputFontFamily": "'Hack Nerd Font'",
    // editor.wordSeparators: 単語単位での移動を行う場合の区切り文字を指定
    // 日本語文書で単語移動を使うため、助詞や読点、括弧を区切り文字として指定する
    "editor.wordSeparators": "./\\()\"'-:,.;<>~!@#$%^&*|+=[]{}`~?　、。「」【】『』（）！？てにをはがのともへでや",
    // 設定: LaTeX Workshop
    // LaTeX Workshop ではビルド設定を「Tool」と「Recipe」という2つで考える
    //   Tool: 実行される1つのコマンド。コマンド (command) と引数 (args) で構成される
    //   Recipe: Tool の組み合わわせを定義する。Tool の組み合わせ (tools) で構成される。
    //           tools の中で利用される Tool は "latex-workshop.latex.tools" で定義されている必要がある。
    // latex-workshop.latex.tools: Tool の定義
    "latex-workshop.latex.tools": [
        // latexmk を利用した xelatex によるビルドコマンド
        {
            "name": "Latexmk (XeLaTeX)",
            "command": "latexmk",
            "args": [
                "-f",
                "-gg",
                "-pv",
                "-xelatex",
                "-synctex=1",
                "-interaction=nonstopmode",
                "-file-line-error",
                "%DOC%"
            ]
        },
        // latexmk を利用した uplatex によるビルドコマンド
        {
            "name": "Latexmk (upLaTeX)",
            "command": "latexmk",
            "args": [
                "-f",
                "-gg",
                "-pv",
                "-synctex=1",
                "-interaction=nonstopmode",
                "-file-line-error",
                "%DOC%"
            ]
        },
        // latexmk を利用した platex によるビルドコマンド
        // 古い LaTeX のテンプレートを使いまわしている (ドキュメントクラスが jreport や jsreport ) 場合のため
        {
            "name": "Latexmk (pLaTeX)",
            "command": "latexmk",
            "args": [
                "-f",
                "-gg",
                "-pv",
                "-latex='platex'",
                "-latexoption='-kanji=utf8 -no-guess-input-env'",
                "-synctex=1",
                "-interaction=nonstopmode",
                "-file-line-error",
                "%DOC%"
            ]
        },
        // latexmk を利用した lualatex によるビルドコマンド
        {
            "name": "Latexmk (LuaLaTeX)",
            "command": "latexmk",
            "args": [
                "-f",
                "-gg",
                "-pv",
                "-lualatex",
                "-synctex=1",
                "-interaction=nonstopmode",
                "-file-line-error",
                "%DOC%"
            ]
        }
    ],
    // latex-workshop.latex.recipes: Recipe の定義
    "latex-workshop.latex.recipes": [
        // XeLaTeX で書かれた文書のビルドレシピ
        {
            "name": "XeLaTeX",
            "tools": [
                "Latexmk (XeLaTeX)"
            ]
        },
        // LaTeX(upLaTeX) で書かれた文書のビルドレシピ
        {
            "name": "upLaTeX",
            "tools": [
                "Latexmk (upLaTeX)"
            ]
        },
        // LaTeX(pLaTeX) で書かれた文書のビルドレシピ
        {
            "name": "pLaTeX",
            "tools": [
                "Latexmk (pLaTeX)"
            ]
        },
        // LuaLaTeX で書かれた文書のビルドレシピ
        {
            "name": "LuaLaTeX",
            "tools": [
                "Latexmk (LuaLaTeX)"
            ]
        }
    ],
    // latex-workshop.latex.magic.args: マジックコメント付きの LaTeX ドキュメントをビルドする設定
    // '%!TEX' で始まる行はマジックコメントと呼ばれ、LaTeX のビルド時にビルドプログラムに解釈され、
    // プログラムの挙動を制御する事ができる。
    // 参考リンク: https://blog.miz-ar.info/2016/11/magic-comments-in-tex/
    "latex-workshop.latex.magic.args": [
        "-f",
        "-gg",
        "-pv",
        "-synctex=1",
        "-interaction=nonstopmode",
        "-file-line-error",
        "%DOC%"
    ],
    // latex-workshop.latex.clean.fileTypes: クリーンアップ時に削除されるファイルの拡張子
    // LaTeX 文書はビルド時に一時ファイルとしていくつかのファイルを生成するが、最終的に必要となるのは
    // PDF ファイルのみである場合などが多い。また、LaTeX のビルド時に失敗した場合、失敗時に生成された
    // 一時ファイルの影響で、修正後のビルドに失敗してしまう事がよくある。そのため、一時的なファイルを
    // 削除する機能 (クリーンアップ) が LaTeX Workshop には備わっている。
    "latex-workshop.latex.clean.fileTypes": [
        "*.aux",
        "*.bbl",
        "*.blg",
        "*.idx",
        "*.ind",
        "*.lof",
        "*.lot",
        "*.out",
        "*.toc",
        "*.acn",
        "*.acr",
        "*.alg",
        "*.glg",
        "*.glo",
        "*.gls",
        "*.ist",
        "*.fls",
        "*.log",
        "*.fdb_latexmk",
        "*.synctex.gz",
        // for Beamer files
        "_minted*",
        "*.nav",
        "*.snm",
        "*.vrb",
    ],
    // latex-workshop.view.pdf.viewer: PDF ビューアの開き方
    // VSCode 自体には PDF ファイルを閲覧する機能が備わっていないが、
    // LaTeX Workshop にはその機能が備わっている。
    // "tab" オプションを指定すると、今開いているエディタを左右に分割し、右側に生成されたPDFを表示するようにしてくれる
    // この PDF ビュアーは LaTeX のビルドによって更新されると同期して内容を更新してくれる。
    "latex-workshop.view.pdf.viewer": "tab",
    // latex-workshop.latex.autoClean.run: ビルド失敗時に一時ファイルのクリーンアップを行うかどうか
    // 上記説明にもあったように、ビルド失敗時に生成された一時ファイルが悪影響を及ぼす事があるため、自動で
    // クリーンアップがかかるようにしておく。
    "latex-workshop.latex.autoClean.run": "onFailed",
    // latex-workshop.latex.autoBuild.run: .tex ファイルの保存時に自動的にビルドを行うかどうか
    // LaTeX ファイルは .tex ファイルを変更後にビルドしないと、PDF ファイル上に変更結果が反映されないため、
    // .tex ファイルの保存と同時に自動的にビルドを実行する設定があるが、文書が大きくなるに連れてビルドにも
    // 時間がかかってしまい、ビルドプログラムの負荷がエディタに影響するため、無効化しておく。
    "latex-workshop.latex.autoBuild.run": "never",
    "vetur.dev.vlsPath": "/User/yanagitakafumi/.nodebrew/current/lib/node_modules/vls",
    "vetur.experimental.templateInterpolationService": true,
    "powermode.enabled": true,
    "powermode.presets": "magic",
    "editor.tabSize": 2,
    "diffEditor.ignoreTrimWhitespace": false,
    "files.autoSaveDelay": 10,
    "python.languageServer": "Microsoft"
}